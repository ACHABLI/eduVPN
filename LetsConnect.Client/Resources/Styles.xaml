<!--
    eduVPN - End-user friendly VPN

    Copyright: 2017, The Commons Conservancy eduVPN Programme
    SPDX-License-Identifier: GPL-3.0+
-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:pages="clr-namespace:eduVPN.Views.Pages;assembly=eduVPN.Views"
    xmlns:windows="clr-namespace:eduVPN.Views.Windows;assembly=eduVPN.Views"
    xmlns:res="clr-namespace:eduVPN.Views.Resources;assembly=eduVPN.Views">

    <!--
        Generic Styles
    -->

    <Style x:Key="BaseStyle" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <AdornedElementPlaceholder x:Name="ErrorAdorner"/>
                        <Grid
                            Margin="-5"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top">
                            <Ellipse
                                Width="14"
                                Height="14"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="{StaticResource ErrorBrush}"
                                ToolTip="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>

                            <TextBlock
                                Foreground="{StaticResource ErrorTextBrush}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                TextAlignment="Center"
                                FontSize="11"
                                ToolTip="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">!</TextBlock>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="AutomationProperties.HelpText" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        Buttons
    -->

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <AdornerDecorator>
                        <Border
                            x:Name="Border"
                            Background="{StaticResource HeaderBrush}"
                            CornerRadius="6">
                            <ContentPresenter
                                Margin="3"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                        </Border>
                    </AdornerDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Background"
                                Value="{StaticResource ButtonHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Background"
                                Value="{StaticResource ButtonPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LinkButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <AdornerDecorator>
                        <Border
                            Background="{x:Null}">
                            <ContentPresenter/>
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ButtonHoverBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ButtonPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        Text Blocks
    -->

    <Style x:Key="TextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="ListBoxItemTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="InfoTitleTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
    </Style>

    <Style x:Key="InfoLabelTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="FontSize" Value="11"/>
    </Style>

    <Style x:Key="InfoDataBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource InfoLabelTextBlockStyle}">
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="MessageBodyStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="FontSize" Value="11"/>
    </Style>

    <Style x:Key="NoteTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="FontStyle" Value="Italic"/>
    </Style>

    <Style x:Key="VersionTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
    </Style>

    <Style x:Key="CopyrightTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="FontSize" Value="12"/>
    </Style>


    <!--
        Separator Styles
    -->

    <Style x:Key="VisualSeparatorStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Fill" Value="{StaticResource HeaderBrush}"/>
    </Style>

    <Style x:Key="ListBoxItemVisualSeparatorStyle" TargetType="{x:Type Rectangle}" BasedOn="{StaticResource VisualSeparatorStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!--
        List Boxes
    -->

    <Style x:Key="ListStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
        <Style.Triggers>
            <DataTrigger
                Binding="{Binding Path=Items.Count, RelativeSource={x:Static RelativeSource.Self}}"
                Value="0">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Style="{StaticResource NoteTextBlockStyle}"
                                Text="{x:Static res:Strings.ListBoxNoItems}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger
                Binding="{Binding Path=ItemsSource, RelativeSource={x:Static RelativeSource.Self}}"
                Value="{x:Null}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Style="{StaticResource NoteTextBlockStyle}"
                                Text="{x:Static res:Strings.ListBoxNull}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonHoverBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        Text Boxes
    -->
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
    </Style>

    <Style x:Key="CodeTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}">
        <Setter Property="FontFamily" Value="Lucida Console"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style x:Key="PasswordBoxStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
    </Style>


    <!--
        Combo Boxes
    -->

    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{StaticResource WindowBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonHoverBrush}"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        Grids
    -->

    <Style x:Key="PageContentGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="-5"/>
    </Style>


    <!--
        Status Bars
    -->

    <Style x:Key="InlineInfoBarStyle" TargetType="{x:Type StatusBar}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Style.Resources>
            <Style TargetType="{x:Type StatusBarItem}">
                <Setter Property="VerticalContentAlignment" Value="Top"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="InfoBarStyle" TargetType="{x:Type StatusBar}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0,1,0,1"/>
        <Style.Resources>
            <Style TargetType="{x:Type StatusBarItem}">
                <Setter Property="VerticalContentAlignment" Value="Top"/>
            </Style>
        </Style.Resources>
    </Style>


    <!--
        Progress Bars
    -->
    <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Height" Value="16"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>


    <!--
        Check Boxes
    -->
    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Width="27">
                        <Border
                            x:Name="Slot"
                            Margin="3"
                            Background="{StaticResource CheckboxSlotBrush}"
                            CornerRadius="6"/>

                        <Ellipse
                            x:Name="Knob"
                            HorizontalAlignment="Left"
                            Width="15"
                            Height="15"
                            Stroke="{StaticResource CheckboxKnobBorderBrush}"
                            StrokeThickness="1">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{StaticResource eduVPNWhiteColor}"/>
                            </Ellipse.Fill>
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Knob"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                                From="0"
                                                To="12"
                                                Duration="0:0:0.1"
                                                AutoReverse="False"/>

                                            <ColorAnimation
                                                Storyboard.TargetName="Knob"
                                                Storyboard.TargetProperty="(Ellipse.Fill).(SolidColorBrush.Color)"
                                                From="{StaticResource eduVPNWhiteColor}"
                                                To="{StaticResource eduVPNBlueColor}"
                                                Duration="0:0:0.1"
                                                AutoReverse="False"/>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Knob"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                                From="12"
                                                To="0"
                                                Duration="0:0:0.1"
                                                AutoReverse="False"/>

                                            <ColorAnimation
                                                Storyboard.TargetName="Knob"
                                                Storyboard.TargetProperty="(Ellipse.Fill).(SolidColorBrush.Color)"
                                                From="{StaticResource eduVPNBlueColor}"
                                                To="{StaticResource eduVPNWhiteColor}"
                                                Duration="0:0:0.1"
                                                AutoReverse="False"/>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Windows
    -->

    <Style x:Key="WindowStyle" TargetType="{x:Type windows:Window}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Background" Value="{StaticResource WindowBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource WindowTextBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource WindowBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsBusy}" Value="True">
                <Setter Property="Cursor" Value="AppStarting"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!--
        ConnectWizard
    -->

    <Style x:Key="HeaderTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="HeaderButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="Width" Value="26"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <AdornerDecorator>
                        <Border
                            x:Name="Border"
                            Background="{x:Null}"
                            BorderBrush="{x:Null}"
                            BorderThickness="0"
                            CornerRadius="4">
                            <ContentPresenter
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                        </Border>
                    </AdornerDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Background"
                                Value="{StaticResource HeaderTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        ConnectWizard Page Templates
    -->

    <Style x:Key="PageTitleStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style x:Key="NavigationButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
        <Setter Property="Background" Value="{StaticResource WindowBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <AdornerDecorator>
                        <Grid>
                            <Ellipse
                                x:Name="Border"
                                Fill="{x:Null}"
                                Stroke="{StaticResource HeaderBrush}"/>

                            <ContentPresenter
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                        </Grid>
                    </AdornerDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Fill"
                                Value="{StaticResource HeaderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Fill"
                                Value="{StaticResource ButtonPressedBrush}"/>
                            <Setter
                                TargetName="Border"
                                Property="Stroke"
                                Value="{StaticResource ButtonPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ErrorStatusBarStyle" TargetType="{x:Type Control}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Visibility" Value="{Binding Path=Error, Converter={StaticResource ExceptionMessageVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StatusBar
                        x:Name="StatusBar"
                        Height="Auto"
                        Style="{StaticResource InfoBarStyle}"
                        AutomationProperties.Name="{Binding Path=Error, Converter={StaticResource ExceptionMessageConverter}}">
                        <StatusBar.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                </Grid>
                            </ItemsPanelTemplate>
                        </StatusBar.ItemsPanel>

                        <StatusBarItem>
                            <ContentControl
                                IsTabStop="False"
                                ContentTemplate="{StaticResource ExclamationIcon}"/>
                        </StatusBarItem>

                        <StatusBarItem
                            Grid.Column="1"
                            VerticalAlignment="Center">
                            <TextBlock
                                TextWrapping="Wrap"
                                Text="{Binding Path=Error, Converter={StaticResource ExceptionMessageConverter}}"/>
                        </StatusBarItem>

                        <StatusBarItem
                            Grid.Column="2">
                            <Button
                                Style="{StaticResource NavigationButtonStyle}"
                                ToolTip="{Binding Source={x:Static res:Strings.ButtonCopyErrorTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                AutomationProperties.Name="{Binding Source={x:Static res:Strings.ButtonCopyErrorTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                Command="{Binding Path=CopyError}">
                                <Canvas Height="14" Width="14">
                                    <Canvas.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="0.082" ScaleX="0.082"/>
                                        </TransformGroup>
                                    </Canvas.RenderTransform>
                                    <Path
                                        Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        Data="M156.73584,73.49902l-19.72656-19.72656c-4.37451-4.375-12.33936-7.67383-18.52637-7.67383h-18.40137c-1.20459-4.86816-3.78906-9.87793-6.93896-13.02832L73.41602,13.34277c-4.37451-4.375-12.33936-7.67383-18.52637-7.67383H19.84277c-7.81494,0-14.17334,6.35742-14.17334,14.17285v89.96484c0,7.81543,6.3584,14.17285,14.17334,14.17285H69.2627v26.25684c0,7.81543,6.3584,14.17285,14.17334,14.17285h66.80029c7.81494,0,14.17334-6.35742,14.17334-14.17285V92.02539C164.40967,85.83887,161.11084,77.87402,156.73584,73.49902z M126.9873,60.25391c0.78418,0.48828,1.47607,1.00781,2.00391,1.53613l19.72656,19.72656c0.52832,0.52832,1.04883,1.2207,1.5376,2.00586h-20.43359c-1.53662,0-2.83447-1.29883-2.83447-2.83496V60.25391zM63.39404,19.82422c0.78467,0.48828,1.47607,1.00781,2.00391,1.53613l19.72656,19.72754c0.52881,0.52832,1.04932,1.2207,1.5376,2.00586H66.22852c-1.53662,0-2.83447-1.29883-2.83447-2.83496V19.82422z M19.84277,112.6416c-1.53662,0-2.83447-1.29883-2.83447-2.83496V19.8418c0-1.53613,1.29785-2.83496,2.83447-2.83496h32.2124v23.25195c0,7.81543,6.3584,14.17285,14.17334,14.17285h4.30811c-0.81055,1.7832-1.27393,3.75684-1.27393,5.83984v52.37012H19.84277zM153.0708,150.23633c0,1.53613-1.29785,2.83496-2.83447,2.83496H83.43604c-1.53662,0-2.83447-1.29883-2.83447-2.83496V60.27148c0-1.53613,1.29785-2.83496,2.83447-2.83496h32.2124V80.6875c0,7.81543,6.3584,14.17285,14.17334,14.17285h23.24902V150.23633z"/>
                                </Canvas>
                            </Button>
                        </StatusBarItem>

                        <StatusBarItem
                            Grid.Column="3">
                            <Button
                                Style="{StaticResource NavigationButtonStyle}"
                                ToolTip="{Binding Source={x:Static res:Strings.ButtonDismissErrorTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                AutomationProperties.Name="{Binding Source={x:Static res:Strings.ButtonDismissErrorTitle}, Converter={StaticResource RemoveAccessKeyConverter}}"
                                Command="{Binding Path=DismissError}">
                                <Canvas Width="14" Height="14">
                                    <Canvas.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="0.082" ScaleX="0.082"/>
                                        </TransformGroup>
                                    </Canvas.RenderTransform>
                                    <Polygon
                                        Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        Points="147.74561,34.36035 135.71924,22.33301 85.03955,73.0127 34.35986,22.33301 22.3335,34.36035 73.0127,85.03906 22.3335,135.71875 34.35986,147.74609 85.03955,97.06641 135.71924,147.74609 147.74561,135.71875 97.06641,85.03906 "/>
                                </Canvas>
                            </Button>
                        </StatusBarItem>
                    </StatusBar>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Error}" Value="{x:Null}">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="StatusBar"
                                            Storyboard.TargetProperty="MaxHeight"
                                            From="200"
                                            To="0"
                                            Duration="0:0:1"
                                            AutoReverse="False"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="StatusBar"
                                            Storyboard.TargetProperty="MaxHeight"
                                            From="0"
                                            To="200"
                                            Duration="0:0:1"
                                            AutoReverse="False"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ConnectWizardPageStyle" TargetType="{x:Type Page}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pages:ConnectWizardPage}">
                    <AdornerDecorator>
                        <Grid Margin="10">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <Button
                                Style="{StaticResource NavigationButtonStyle}"
                                AutomationProperties.Name="{x:Static res:Strings.ButtonBackTitle}"
                                Command="{Binding Path=NavigateBack}">
                                <Canvas Height="14" Width="14">
                                    <Canvas.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="0.082" ScaleX="0.082"/>
                                        </TransformGroup>
                                    </Canvas.RenderTransform>
                                    <Polygon
                                        Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        Points="107.37256,147.74512 44.6665,85.03906 107.37256,22.33301 119.39893,34.36035 68.71924,85.03906 119.39893,135.71973 "/>
                                </Canvas>
                            </Button>

                            <TextBlock
                                Grid.Column="1"
                                Margin="-35,10,10,10"
                                VerticalAlignment="Top"
                                Style="{StaticResource PageTitleStyle}"
                                Text="{Binding Path=Title, RelativeSource={RelativeSource TemplatedParent}}"/>

                            <TextBlock
                                Grid.ColumnSpan="2"
                                Grid.Row="1"
                                Margin="30,10"
                                Style="{StaticResource TextBlockStyle}"
                                Visibility="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}"
                                Text="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"/>

                            <ContentPresenter
                                Grid.ColumnSpan="2"
                                Grid.Row="2"
                                Margin="10"/>
                        </Grid>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ConnectWizardPageWithSettingsStyle" TargetType="{x:Type Page}" BasedOn="{StaticResource ConnectWizardPageStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pages:ConnectWizardPage}">
                    <AdornerDecorator>
                        <Grid Margin="10">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="45"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <Button
                                Style="{StaticResource NavigationButtonStyle}"
                                ToolTip="{x:Static res:Strings.ButtonBackTitle}"
                                AutomationProperties.Name="{x:Static res:Strings.ButtonBackTitle}"
                                Command="{Binding Path=NavigateBack}">
                                <Canvas Height="14" Width="14">
                                    <Canvas.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleY="0.082" ScaleX="0.082"/>
                                        </TransformGroup>
                                    </Canvas.RenderTransform>
                                    <Polygon
                                        Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        Points="107.37256,147.74512 44.6665,85.03906 107.37256,22.33301 119.39893,34.36035 68.71924,85.03906 119.39893,135.71973 "/>
                                </Canvas>
                            </Button>

                            <TextBlock
                                Grid.Column="1"
                                Margin="-35,10,-35,10"
                                VerticalAlignment="Top"
                                Style="{StaticResource PageTitleStyle}"
                                Text="{Binding Path=Title, RelativeSource={RelativeSource TemplatedParent}}"/>

                            <Button
                                Grid.Column="2"
                                Style="{StaticResource NavigationButtonStyle}"
                                ToolTip="{x:Static res:Strings.ButtonSettingsTitle}"
                                AutomationProperties.Name="{x:Static res:Strings.ButtonSettingsTitle}"
                                Command="{Binding Path=Wizard.NavigateTo}"
                                CommandParameter="{Binding Path=Wizard.SettingsPage}">
                                <Button.Template>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid>
                                            <Ellipse
                                                x:Name="Border"
                                                Fill="{x:Null}"
                                                Stroke="{StaticResource HeaderBrush}"/>

                                            <Image
                                                x:Name="Image"
                                                MaxHeight="14"
                                                MaxWidth="14"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                Source="pack://application:,,,/Resources/SettingsBlue.png"
                                                RenderOptions.BitmapScalingMode="Fant"/>
                                        </Grid>

                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter
                                                    TargetName="Border"
                                                    Property="Fill"
                                                    Value="{StaticResource HeaderBrush}"/>
                                                <Setter
                                                    TargetName="Image"
                                                    Property="Source"
                                                    Value="pack://application:,,,/Resources/Settings.png"/>
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter
                                                    TargetName="Border"
                                                    Property="Fill"
                                                    Value="{StaticResource ButtonPressedBrush}"/>
                                                <Setter
                                                    TargetName="Border"
                                                    Property="Stroke"
                                                    Value="{StaticResource ButtonPressedBrush}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>

                            <TextBlock
                                Grid.ColumnSpan="3"
                                Grid.Row="1"
                                Margin="30,10"
                                Style="{StaticResource TextBlockStyle}"
                                Visibility="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}"
                                Text="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"/>

                            <ContentPresenter
                                Grid.ColumnSpan="3"
                                Grid.Row="2"
                                Margin="10"/>
                        </Grid>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Popups
    -->

    <Style x:Key="PopupHeaderButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource HeaderButtonStyle}">
        <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <AdornerDecorator>
                        <Border
                            x:Name="Border"
                            Background="{x:Null}"
                            BorderBrush="{x:Null}"
                            BorderThickness="0"
                            CornerRadius="4">
                            <ContentPresenter
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                        </Border>
                    </AdornerDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Background"
                                Value="{StaticResource HeaderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PopupWindowStyle" TargetType="{x:Type windows:Window}" BasedOn="{StaticResource WindowStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:Window}">
                    <Border
                        BorderBrush="{StaticResource WindowBorderBrush}"
                        BorderThickness="1">
                        <AdornerDecorator>
                            <Grid Background="{StaticResource WindowBrush}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>

                                    <TextBlock
                                        Margin="5"
                                        Style="{StaticResource PageTitleStyle}"
                                        Text="{Binding Path=Title, RelativeSource={RelativeSource TemplatedParent}}"/>

                                    <Control
                                        Grid.Row="1"
                                        Style="{StaticResource ErrorStatusBarStyle}"/>

                                    <TextBlock
                                        Grid.Row="2"
                                        Margin="30,10"
                                        Style="{StaticResource TextBlockStyle}"
                                        Visibility="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}"
                                        Text="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"/>

                                    <ContentPresenter
                                        Grid.Row="3"
                                        Margin="10"/>
                                </Grid>

                                <Button
                                    Margin="2"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Top"
                                    IsCancel="True"
                                    Style="{StaticResource PopupHeaderButtonStyle}"
                                    AutomationProperties.Name="{x:Static res:Strings.ButtonCloseTitle}">
                                    <Border
                                        Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                        BorderBrush="{x:Null}"
                                        BorderThickness="0">
                                        <Canvas Width="12" Height="12">
                                            <Canvas.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleY="0.071" ScaleX="0.071"/>
                                                </TransformGroup>
                                            </Canvas.RenderTransform>
                                            <Polygon
                                                Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                                Points="147.74561,34.36035 135.71924,22.33301 85.03955,73.0127 34.35986,22.33301 22.3335,34.36035 73.0127,85.03906 22.3335,135.71875 34.35986,147.74609 85.03955,97.06641 135.71924,147.74609 147.74561,135.71875 97.06641,85.03906 "/>
                                        </Canvas>
                                    </Border>
                                </Button>
                            </Grid>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        Choice Buttons
    -->

    <Style x:Key="ChoiceItemsControlStyle" TargetType="{x:Type ItemsControl}">
        <Setter Property="IsTabStop" Value="False"/>
    </Style>

    <Style x:Key="ChoiceButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MinHeight" Value="90"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <AdornerDecorator>
                        <Border
                            x:Name="Border"
                            Background="{StaticResource HeaderBrush}"
                            CornerRadius="6">
                            <ContentPresenter
                                Margin="3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"/>
                        </Border>
                    </AdornerDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Background"
                                Value="{StaticResource ButtonHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter
                                TargetName="Border"
                                Property="Background"
                                Value="{StaticResource ButtonPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ChoiceIconStyle" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="Fant"/>
    </Style>


    <!--
        Labels
    -->

    <Style x:Key="AccessTextStyle" TargetType="{x:Type AccessText}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="ChoiceNoteStyle" TargetType="{x:Type AccessText}" BasedOn="{StaticResource AccessTextStyle}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}"/>
    </Style>

    <Style x:Key="LabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Style.Resources>
            <Style TargetType="AccessText">
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="Margin" Value="-5"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="SectionLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource LabelStyle}">
        <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
    </Style>

</ResourceDictionary>
